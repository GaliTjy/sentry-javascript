{
  // Use IntelliSense to learn about possible Node.js debug attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "inputs": [
    {
        "id": "getPackageName",
        "type": "command",
        "command": "shellCommand.execute",
        "args": {
            "command": "echo '${file}' | sed s/'.*sentry-javascript\\/packages\\/'// | grep --extended-regexp --only-matching --max-count 1 '[^\\/]+' | head -1",
            "cwd": "${workspaceFolder}" ,
            // normally `input` commands bring up a selector for the user, but given that there should only be one
            // choice here, this lets us skip the prompt
            "useSingleResult": true
        }
    }
  ],
  "configurations": [
    // Run a specific test file in watch mode (must have file in currently active tab when hitting the play button).
    // NOTE: If you try to run this and VSCode complains that the command `shellCommand.execute` can't be found, go
    // install the recommended extension Tasks Shell Input.
    {
      "name": "Debug unit tests - just open file",
      "type": "node",
      "cwd": "${workspaceFolder}/packages/${input:getPackageName}",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/.bin/jest",
      "args": [
        "--watch",
        // this makes the output less noisy (and at some point in the past seemed necessary to fix... something)
        "--runInBand",
        // TODO: when we unify jest config, we may need to change this
        "--config",
        "${workspaceFolder}/packages/${input:getPackageName}/package.json",
        // coverage messes up the source maps
        "--coverage",
        "false",
        // remove this to run all package tests
        "${relativeFile}"
      ],
      "sourceMaps": true,
      "smartStep": true,
       // otherwise it goes to the VSCode debug terminal, which prints the test output or console logs (depending on
       // "outputCapture" option here; default is to show console logs), but not both
      "console": "integratedTerminal",
      // since we're not using it, don't automatically switch to it
      "internalConsoleOptions": "neverOpen",
    },


    // @sentry/nextjs - Run a specific integration test file
    // Must have file in currently active tab when hitting the play button
    {
      "name": "Debug @sentry/nextjs integration tests - just open file",
      "type": "node",
      "cwd": "${workspaceFolder}/packages/nextjs",
      "request": "launch",
      // TODO create a build task
      // "preLaunchTask": "yarn build",

      // this is going straight to `server.js` (rather than running the tests through yarn) in order to be able to skip
      // having to reinstall dependencies on every new test run
      "program": "${workspaceFolder}/packages/nextjs/test/integration/test/server.js",
      "args": [
        "--debug",
        // remove these two lines to run all integration tests
        "--filter",
        "${fileBasename}"
      ],
      "sourceMaps": true,
      "skipFiles": [
        "<node_internals>/**", "**/tslib/**"
      ],
    },
  ]
}
